classType myCar.CCF
blockdiagramSpecification Main {
	methodBody calc {
		outPin active {
			connection_14, connection_16, connection_23, connection_25, connection_27, connection_29, connection_64, connection_106, connection_103, connection_104, connection_105, connection_102, connection_45, connection_59, connection_107
		}
	}
	simpleIdentifier resources.DriverMessages.on at (21, 165) {
		label at (0, -1)
		outPin {
			connection_15
		}
		sequenceCall {
			inPin
		}
	}
	simpleIdentifier resources.CarMessages.power at (831, 345) {
		label at (0, -1)
		inPin connection_46 {
			bendpoints (70, 0)
		}
		sequenceCall at (-10, -14) {
			inPin connection_45
		}
	}
	simpleIdentifier resources.DriverMessages.brake at (451, 405) {
		label at (0, -1)
		outPin {
			connection_52
		}
		sequenceCall {
			inPin
		}
	}
	simpleIdentifier resources.DriverMessages.power at (461, 345) {
		label at (0, -1)
		outPin {
			connection_50
		}
		sequenceCall {
			inPin
		}
	}
	simpleIdentifier resources.CarMessages.v at (171, 205) {
		label at (0, -1)
		outPin {
			connection_13, connection_7
		}
		sequenceCall {
			inPin
		}
	}
	complexIdentifier TVI at (331, 171) size (14, 8) backgroundColor #ffffff {
		label at (40, -79)
		methodCall myCar.TargetVelocity.inc {
			methodVoidPin at (bottom, 1) sequenceCall at (-24, 11) {
				inPin connection_4 {
					bendpoints (-10, 0), (-10, -7), (10, -7)
				}
			}
		}
		methodCall myCar.TargetVelocity.dec {
			methodVoidPin at (bottom, 11) sequenceCall at (-14, 11) {
				inPin connection_5 {
					bendpoints (100, 0), (100, -90)
				}
			}
		}
		methodCall myCar.TargetVelocity.velocity {
			returnPin at (right, 3) {
				connection_83
			}
			sequenceCall {
				inPin
			}
		}
		methodCall myCar.TargetVelocity.reset {
			argumentPin arg at (left, 3) connection_7
			sequenceCall at (-50, -24) {
				inPin connection_6 {
					bendpoints (10, 0), (10, 20)
				}
			}
		}
	}
	greater at (531, 66) {
		inPin connection_13 {
			bendpoints (40, 0), (40, -140)
		}
		inPin connection_83 {
			bendpoints (20, 0), (20, -120)
		}
		outPin {
			connection_65
		}
	}
	complexIdentifier OnRising at (101, 151) size (3, 3) backgroundColor #ffffff {
		label at (0, 1)
		methodCall SystemLib.Miscellaneous.EdgeRising.compute {
			argumentPin signal at (left, 1) connection_15
			sequenceCall at (-70, -30) {
				inPin connection_14
			}
		}
		methodCall SystemLib.Miscellaneous.EdgeRising.value {
			returnPin at (right, 1) {
				connection_54, connection_17
			}
			sequenceCall {
				inPin
			}
		}
	}
	if at (201, 161) {
		inPin connection_17
		ifControlFlowOutPin {
			connection_6
		}
		sequenceCall {
			inPin connection_16
		}
	}
	simpleIdentifier resources.DriverMessages.increment at (31, 265) {
		label at (0, -1)
		outPin {
			connection_24
		}
		sequenceCall {
			inPin
		}
	}
	simpleIdentifier resources.DriverMessages.decrement at (31, 355) {
		label at (0, -1)
		outPin {
			connection_26
		}
		sequenceCall {
			inPin
		}
	}
	complexIdentifier IncRising at (151, 251) size (3, 3) backgroundColor #ffffff {
		label at (0, 1)
		methodCall SystemLib.Miscellaneous.EdgeRising.compute {
			argumentPin signal at (left, 1) connection_24
			sequenceCall at (-70, -30) {
				inPin connection_23
			}
		}
		methodCall SystemLib.Miscellaneous.EdgeRising.value {
			returnPin at (right, 1) {
				connection_28
			}
			sequenceCall {
				inPin
			}
		}
	}
	complexIdentifier DecRising at (151, 341) size (3, 3) backgroundColor #ffffff {
		label at (0, 1)
		methodCall SystemLib.Miscellaneous.EdgeRising.compute {
			argumentPin signal at (left, 1) connection_26
			sequenceCall at (-70, -30) {
				inPin connection_25
			}
		}
		methodCall SystemLib.Miscellaneous.EdgeRising.value {
			returnPin at (right, 1) {
				connection_30
			}
			sequenceCall {
				inPin
			}
		}
	}
	if at (261, 261) {
		inPin connection_28
		ifControlFlowOutPin {
			connection_4
		}
		sequenceCall {
			inPin connection_27
		}
	}
	if at (261, 351) {
		inPin connection_30
		ifControlFlowOutPin {
			connection_5
		}
		sequenceCall {
			inPin connection_29
		}
	}
	simpleIdentifier resources.DriverMessages.display at (831, 435) {
		label at (0, -1)
		inPin connection_60 {
			bendpoints (90, 0)
		}
		sequenceCall at (-10, -14) {
			inPin connection_59
		}
	}
	ifElse at (611, 71) {
		inPin connection_65
		ifControlFlowOutPin {
			connection_66
		}
		elseControlFlowOutPin {
			connection_68
		}
		sequenceCall {
			inPin connection_64
		}
	}
	simpleIdentifier ctl at (771, 95) {
		label at (0, -1)
		inPin connection_67
		outPin sequenceCall {
			inPin connection_66
		}
	}
	simpleIdentifier ctl at (771, 155) {
		label at (0, -1)
		inPin connection_69
		outPin {
			connection_71
		}
		sequenceCall {
			inPin connection_68 {
				bendpoints (0, 30)
			}
		}
	}
	simpleIdentifier brake at (701, 95) {
		label at (0, -1)
		outPin {
			connection_67
		}
		sequenceCall {
			inPin
		}
	}
	simpleIdentifier power at (701, 155) {
		label at (0, -1)
		outPin {
			connection_69
		}
		sequenceCall {
			inPin
		}
	}
	complexIdentifier CCFState_instance at (611, 361) size (14, 8) {
		label at (0, 1)
		methodCall myCar.CCFState.cCFStateStatemachineTrigger {
			methodVoidPin at (top, 0) sequenceCall at (-14, -36) {
				inPin connection_102
			}
		}
		elementCall (myCar.CCFState.pow) {
			argumentPin at (left, 0) connection_50 {
				bendpoints (100, 0)
			}
			sequenceCall at (120, -114) {
				inPin connection_103
			}
		}
		elementCall (myCar.CCFState.bra) {
			argumentPin at (left, 2) connection_52 {
				bendpoints (0, -20)
			}
			sequenceCall at (50, -104) {
				inPin connection_104
			}
		}
		elementCall (myCar.CCFState.pw) {
			returnPin at (right, 0) {
				connection_46
			}
			sequenceCall {
				inPin
			}
		}
		elementCall (myCar.CCFState.br) {
			returnPin at (right, 1) {
				connection_108
			}
			sequenceCall {
				inPin
			}
		}
		elementCall (myCar.CCFState.on) {
			returnPin at (bottom, 12) {
				connection_60
			}
			sequenceCall {
				inPin
			}
		}
		elementCall (myCar.CCFState.act) {
			argumentPin at (left, 5) connection_54 {
				bendpoints (460, 0)
			}
			sequenceCall at (-70, -74) {
				inPin connection_105
			}
		}
		elementCall (myCar.CCFState.ctrl) {
			argumentPin at (left, 3) connection_71 {
				bendpoints (-220, 0)
			}
			sequenceCall at (-90, -4) {
				inPin connection_106
			}
		}
	}
	simpleIdentifier resources.CarMessages.recuperation at (831, 395) {
		label at (0, -1)
		inPin connection_108 {
			bendpoints (70, 0)
		}
		sequenceCall {
			inPin connection_107
		}
	}
}